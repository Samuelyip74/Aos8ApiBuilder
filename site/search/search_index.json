{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"getting-started/","text":"Getting Started \u00b6 Install Aos8ApiBuilder \u00b6 Before you can use Aos8ApiBuilder, you\u2019ll need to install it via pip. To install the library, type \u201cpip install aos8-api\u201d Write your first API call \u00b6 Installed Aos8ApiBuilder already? Good. Now try the below tutorial, which walks you through creating a basic API call. import pprint from aos8_api.ApiBuilder import AosApiClientBuilder client = ( AosApiClientBuilder() .setBaseUrl(\"https://<ip-address-of-omniswitch>\") .setUsername(\"<username>\") .setPassword(\"<password>\") .build() ) result = client.interface.admin_enable(\"1/1/28-30\") if result.success: print(\"\u2705 Operation successfully\") pprint.pprint(result.output) else: print(f\"\u274c Operation failed (diag={result.diag}): {result.error}\")","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting Started"},{"location":"getting-started/#install-aos8apibuilder","text":"Before you can use Aos8ApiBuilder, you\u2019ll need to install it via pip. To install the library, type \u201cpip install aos8-api\u201d","title":"Install Aos8ApiBuilder"},{"location":"getting-started/#write-your-first-api-call","text":"Installed Aos8ApiBuilder already? Good. Now try the below tutorial, which walks you through creating a basic API call. import pprint from aos8_api.ApiBuilder import AosApiClientBuilder client = ( AosApiClientBuilder() .setBaseUrl(\"https://<ip-address-of-omniswitch>\") .setUsername(\"<username>\") .setPassword(\"<password>\") .build() ) result = client.interface.admin_enable(\"1/1/28-30\") if result.success: print(\"\u2705 Operation successfully\") pprint.pprint(result.output) else: print(f\"\u274c Operation failed (diag={result.diag}): {result.error}\")","title":"Write your first API call"},{"location":"intro/","text":"Aos8ApiBuilder \u00b6 The Aos8ApiBuilder class provides an interface to construct, configure, and manage API endpoint groups for interacting with Alcatel-Lucent OmniSwitch devices using the AOS8 MIB-Based or CLI over HTTP. It acts as the main orchestrator for initializing the client and organizing the available API modules. The builder is made up of two key classes and one data model: ApiBuilder - A class to initialize the ApiBuilder with the OmniSwitch parameters (i.e. BaseURL, username, password etc). ApiClient - A class that interact with OmniSwitch RestFUL API via GET, POST, PUT DELETE methods. ApiResult - A data model for reading the results from OmniSwitch interaction. The API endpoints extend ApiClient to interact with OmniSwitch for management functions, such as configuring VLAN, IP, OSPF etc. You are welcome to develop and extend ApiClient to include custom API if not already available.","title":"Introduction"},{"location":"intro/#aos8apibuilder","text":"The Aos8ApiBuilder class provides an interface to construct, configure, and manage API endpoint groups for interacting with Alcatel-Lucent OmniSwitch devices using the AOS8 MIB-Based or CLI over HTTP. It acts as the main orchestrator for initializing the client and organizing the available API modules. The builder is made up of two key classes and one data model: ApiBuilder - A class to initialize the ApiBuilder with the OmniSwitch parameters (i.e. BaseURL, username, password etc). ApiClient - A class that interact with OmniSwitch RestFUL API via GET, POST, PUT DELETE methods. ApiResult - A data model for reading the results from OmniSwitch interaction. The API endpoints extend ApiClient to interact with OmniSwitch for management functions, such as configuring VLAN, IP, OSPF etc. You are welcome to develop and extend ApiClient to include custom API if not already available.","title":"Aos8ApiBuilder"},{"location":"api/ApiBuilder/","text":"Aos8ApiBuilder Class \u00b6 AosApiClientBuilder \u00b6 A builder class for creating and configuring an instance of AosApiClient . __init__ () \u00b6 Initialize the builder with default configuration. build () \u00b6 Finalize the builder and return an instance of AosApiClient . Returns: AosApiClient \u2013 A configured AosApiClient instance. Raises: ValueError \u2013 If any required fields are missing. setBaseUrl ( base_url ) \u00b6 Set the base URL for the API. Parameters: base_url ( str ) \u2013 The base URL of the API. Returns: AosApiClientBuilder \u2013 The builder instance. setDebug ( debug ) \u00b6 Enable or disable debug mode. Parameters: debug ( bool ) \u2013 Whether to enable debug logging. Returns: AosApiClientBuilder \u2013 The builder instance. setPassword ( password ) \u00b6 Set the API password. Parameters: password ( str ) \u2013 The API password. Returns: AosApiClientBuilder \u2013 The builder instance. setUsername ( username ) \u00b6 Set the API username. Parameters: username ( str ) \u2013 The API username. Returns: AosApiClientBuilder \u2013 The builder instance. setVerifySSL ( verify ) \u00b6 Enable or disable SSL verification. Parameters: verify ( bool ) \u2013 Whether to verify SSL certificates. Returns: AosApiClientBuilder \u2013 The builder instance.","title":"ApiBuilder"},{"location":"api/ApiBuilder/#aos8apibuilder-class","text":"","title":"Aos8ApiBuilder Class"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder","text":"A builder class for creating and configuring an instance of AosApiClient .","title":"AosApiClientBuilder"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder.__init__","text":"Initialize the builder with default configuration.","title":"__init__"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder.build","text":"Finalize the builder and return an instance of AosApiClient . Returns: AosApiClient \u2013 A configured AosApiClient instance. Raises: ValueError \u2013 If any required fields are missing.","title":"build"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder.setBaseUrl","text":"Set the base URL for the API. Parameters: base_url ( str ) \u2013 The base URL of the API. Returns: AosApiClientBuilder \u2013 The builder instance.","title":"setBaseUrl"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder.setDebug","text":"Enable or disable debug mode. Parameters: debug ( bool ) \u2013 Whether to enable debug logging. Returns: AosApiClientBuilder \u2013 The builder instance.","title":"setDebug"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder.setPassword","text":"Set the API password. Parameters: password ( str ) \u2013 The API password. Returns: AosApiClientBuilder \u2013 The builder instance.","title":"setPassword"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder.setUsername","text":"Set the API username. Parameters: username ( str ) \u2013 The API username. Returns: AosApiClientBuilder \u2013 The builder instance.","title":"setUsername"},{"location":"api/ApiBuilder/#aos8_api.ApiBuilder.AosApiClientBuilder.setVerifySSL","text":"Enable or disable SSL verification. Parameters: verify ( bool ) \u2013 Whether to verify SSL certificates. Returns: AosApiClientBuilder \u2013 The builder instance.","title":"setVerifySSL"},{"location":"api/ApiClient/","text":"AosApiClient \u00b6 API client for interacting with Alcatel-Lucent OmniSwitch AOS8 HTTP API. This client provides a high-level interface for authentication and making GET, POST, PUT, and DELETE requests to various AOS8 API endpoints. __init__ ( username , password , base_url , verify_ssl = False , debug = False ) \u00b6 Initialize the AOS API client and log in. Parameters: username ( str ) \u2013 AOS API username. password ( str ) \u2013 AOS API password. base_url ( str ) \u2013 Base URL of the AOS device. verify_ssl ( bool , default: False ) \u2013 Whether to verify SSL certificates. debug ( bool , default: False ) \u2013 Enable debug logging. close () \u00b6 Close the underlying HTTP connection pool. delete ( path , ** kwargs ) \u00b6 Send a DELETE request. Parameters: path ( str ) \u2013 API endpoint path. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object. get ( path , ** kwargs ) \u00b6 Send a GET request. Parameters: path ( str ) \u2013 API endpoint path. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object. post ( path , data = None , ** kwargs ) \u00b6 Send a POST request. Parameters: path ( str ) \u2013 API endpoint path. data ( dict , default: None ) \u2013 Dictionary to send in the body. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object. put ( path , data = None , ** kwargs ) \u00b6 Send a PUT request. Parameters: path ( str ) \u2013 API endpoint path. data ( dict , default: None ) \u2013 Dictionary to send in the body. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object.","title":"ApiClient"},{"location":"api/ApiClient/#aos8_api.ApiClient.AosApiClient","text":"API client for interacting with Alcatel-Lucent OmniSwitch AOS8 HTTP API. This client provides a high-level interface for authentication and making GET, POST, PUT, and DELETE requests to various AOS8 API endpoints.","title":"AosApiClient"},{"location":"api/ApiClient/#aos8_api.ApiClient.AosApiClient.__init__","text":"Initialize the AOS API client and log in. Parameters: username ( str ) \u2013 AOS API username. password ( str ) \u2013 AOS API password. base_url ( str ) \u2013 Base URL of the AOS device. verify_ssl ( bool , default: False ) \u2013 Whether to verify SSL certificates. debug ( bool , default: False ) \u2013 Enable debug logging.","title":"__init__"},{"location":"api/ApiClient/#aos8_api.ApiClient.AosApiClient.close","text":"Close the underlying HTTP connection pool.","title":"close"},{"location":"api/ApiClient/#aos8_api.ApiClient.AosApiClient.delete","text":"Send a DELETE request. Parameters: path ( str ) \u2013 API endpoint path. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object.","title":"delete"},{"location":"api/ApiClient/#aos8_api.ApiClient.AosApiClient.get","text":"Send a GET request. Parameters: path ( str ) \u2013 API endpoint path. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object.","title":"get"},{"location":"api/ApiClient/#aos8_api.ApiClient.AosApiClient.post","text":"Send a POST request. Parameters: path ( str ) \u2013 API endpoint path. data ( dict , default: None ) \u2013 Dictionary to send in the body. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object.","title":"post"},{"location":"api/ApiClient/#aos8_api.ApiClient.AosApiClient.put","text":"Send a PUT request. Parameters: path ( str ) \u2013 API endpoint path. data ( dict , default: None ) \u2013 Dictionary to send in the body. **kwargs \u2013 Additional parameters for the request. Returns: Response \u2013 Response object.","title":"put"},{"location":"api/models/","text":"ApiResult dataclass \u00b6 Standard result object for API or command execution responses. Attributes: success ( bool ) \u2013 Indicates whether the operation was successful. diag ( int ) \u2013 Diagnostic or status code from the operation. error ( Optional [ Union [ str , List [ str ]]] ) \u2013 Error message(s), if any. output ( Optional [ str ] ) \u2013 Raw output from the operation, if applicable. data ( Any ) \u2013 Parsed or structured result data.","title":"Models"},{"location":"api/models/#aos8_api.models.ApiResult","text":"Standard result object for API or command execution responses. Attributes: success ( bool ) \u2013 Indicates whether the operation was successful. diag ( int ) \u2013 Diagnostic or status code from the operation. error ( Optional [ Union [ str , List [ str ]]] ) \u2013 Error message(s), if any. output ( Optional [ str ] ) \u2013 Raw output from the operation, if applicable. data ( Any ) \u2013 Parsed or structured result data.","title":"ApiResult"},{"location":"endpoints/chassis/","text":"ChassisEndpoint \u00b6 Bases: BaseEndpoint Endpoint to manage chassis on an Alcatel-Lucent OmniSwitch using MIB-based API commands. cmmHardwareInfo ( limit = 200 ) \u00b6 Retrieve details about the active CMM module(s), including model, part number, and status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed hardware and operational info of CMM modules. dmmConfig () \u00b6 Get global DDM configuration and trap settings. Returns: ApiResult ( ApiResult ) \u2013 Parsed DDM configuration response. fanStatus ( limit = 200 ) \u00b6 Retrieve fan information such as status, speed, and airflow. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Returns: ApiResult ( ApiResult ) \u2013 Fan hardware data from the switch. getHashControl () \u00b6 Retrieve hash configuration parameters including hash mode and non-unicast behavior. Returns: ApiResult ( ApiResult ) \u2013 Parsed hash control settings from the switch. getLEDStatus ( filter_value = 'CMM' , limit = 200 ) \u00b6 Retrieve the list of LED and status information for CMM modules. Parameters: filter_value ( str , default: 'CMM' ) \u2013 Filter to apply on entPhysIndexModuleType (e.g., \u201cCMM\u201d). limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed status data from the switch. hardwareinfo ( limit = 200 ) \u00b6 Retrieve chassis component and environmental status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to retrieve. Returns: ApiResult ( ApiResult ) \u2013 Parsed data including hardware, temperature, and status info. poePower ( limit = 200 ) \u00b6 Retrieve PoE controller configurations and firmware status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of records to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response containing PoE controller information. powerSupplies ( limit = 200 ) \u00b6 Retrieve details of power supplies including power type and operational status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of records to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response with power supply information. runningDirectory ( limit = 200 ) \u00b6 Retrieve control module details including versions, status, and synchronization. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Control module information from the switch. slot ( limit = 200 ) \u00b6 Retrieve hardware and PoE firmware details for NI modules. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed inventory and versioning data for NI modules. software ( limit = 200 ) \u00b6 Fetch control module, loaded microcode, and virtual chassis hardware information. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to retrieve. Returns: ApiResult ( ApiResult ) \u2013 Parsed data including control status and versioning. temperature ( limit = 200 ) \u00b6 Retrieve current temperature, thresholds, and status for all temperature sensors. Parameters: limit ( int , default: 200 ) \u2013 Max number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed temperature data including thresholds and sensor status. transceiversInfo ( limit = 200 ) \u00b6 Retrieve GBIC/transceiver module information. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response with GBIC module data.","title":"Chassis"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint","text":"Bases: BaseEndpoint Endpoint to manage chassis on an Alcatel-Lucent OmniSwitch using MIB-based API commands.","title":"ChassisEndpoint"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.cmmHardwareInfo","text":"Retrieve details about the active CMM module(s), including model, part number, and status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed hardware and operational info of CMM modules.","title":"cmmHardwareInfo"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.dmmConfig","text":"Get global DDM configuration and trap settings. Returns: ApiResult ( ApiResult ) \u2013 Parsed DDM configuration response.","title":"dmmConfig"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.fanStatus","text":"Retrieve fan information such as status, speed, and airflow. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Returns: ApiResult ( ApiResult ) \u2013 Fan hardware data from the switch.","title":"fanStatus"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.getHashControl","text":"Retrieve hash configuration parameters including hash mode and non-unicast behavior. Returns: ApiResult ( ApiResult ) \u2013 Parsed hash control settings from the switch.","title":"getHashControl"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.getLEDStatus","text":"Retrieve the list of LED and status information for CMM modules. Parameters: filter_value ( str , default: 'CMM' ) \u2013 Filter to apply on entPhysIndexModuleType (e.g., \u201cCMM\u201d). limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed status data from the switch.","title":"getLEDStatus"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.hardwareinfo","text":"Retrieve chassis component and environmental status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to retrieve. Returns: ApiResult ( ApiResult ) \u2013 Parsed data including hardware, temperature, and status info.","title":"hardwareinfo"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.poePower","text":"Retrieve PoE controller configurations and firmware status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of records to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response containing PoE controller information.","title":"poePower"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.powerSupplies","text":"Retrieve details of power supplies including power type and operational status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of records to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response with power supply information.","title":"powerSupplies"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.runningDirectory","text":"Retrieve control module details including versions, status, and synchronization. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Control module information from the switch.","title":"runningDirectory"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.slot","text":"Retrieve hardware and PoE firmware details for NI modules. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed inventory and versioning data for NI modules.","title":"slot"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.software","text":"Fetch control module, loaded microcode, and virtual chassis hardware information. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to retrieve. Returns: ApiResult ( ApiResult ) \u2013 Parsed data including control status and versioning.","title":"software"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.temperature","text":"Retrieve current temperature, thresholds, and status for all temperature sensors. Parameters: limit ( int , default: 200 ) \u2013 Max number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed temperature data including thresholds and sensor status.","title":"temperature"},{"location":"endpoints/chassis/#aos8_api.endpoints.chassis.ChassisEndpoint.transceiversInfo","text":"Retrieve GBIC/transceiver module information. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response with GBIC module data.","title":"transceiversInfo"},{"location":"endpoints/interface/","text":"InterfaceEndpoint \u00b6 Bases: BaseEndpoint Provides interface-related configuration and status management endpoints for Alcatel-Lucent OmniSwitch using MIB-based REST API. admin_disable ( port ) \u00b6 Disable administrative state of the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status. admin_enable ( port ) \u00b6 Enable administrative state of the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status. autoneg_disable ( port ) \u00b6 Disable auto-negotiation on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status. autoneg_enable ( port ) \u00b6 Enable auto-negotiation on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status. clear_statistics ( target , stat_type , cli_only = False ) \u00b6 Clear interface statistics counters (Layer 2 or TDR). Parameters: target ( str ) \u2013 Slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d or \u201c1/3/1-4\u201d). stat_type ( str ) \u2013 \u201cl2-statistics\u201d or \u201ctdr-statistics\u201d. cli_only ( bool , default: False ) \u2013 Whether to include \u201ccli\u201d for l2-statistics. Returns: ApiResult \u2013 ApiResult of the CLI command. Raises: ValueError \u2013 If input is invalid. clear_violation ( target , is_linkagg = False ) \u00b6 Clears all the MAC address violation logs for a specified port or link aggregate. Parameters: target ( str ) \u2013 Port in the format \u2018chassis/slot/port[-port2]\u2019 or linkagg ID/range like \u20181-2\u2019. is_linkagg ( bool , default: False ) \u2013 If True, clears violation for a linkagg; otherwise, clears for port(s). Returns: ApiResult \u2013 ApiResult from the CLI API. epp_disable ( port ) \u00b6 Disable EPP on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status. epp_enable ( port ) \u00b6 Enable EPP on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status. flood_control ( limit = 200 ) \u00b6 Retrieve broadcast, unicast, and multicast storm control settings. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed storm control data from the switch. get_interface ( port ) \u00b6 Retrieve detailed status of a specific port. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d. Returns: Optional [ dict ] \u2013 A dictionary of parsed interface details or None if the request fails. globalPTPConfig () \u00b6 Retrieve the global PTP (Precision Time Protocol) configuration. Returns: ApiResult ( ApiResult ) \u2013 Parsed PTP configuration data from the switch. globalPVR () \u00b6 Retrieve global PVR configuration values. Returns: ApiResult ( ApiResult ) \u2013 Parsed global PVR configuration from the switch. link_monitoring_config ( limit = 200 ) \u00b6 Retrieve link monitoring settings per interface. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed link monitor configuration from the switch. link_monitoring_statistic ( limit = 200 ) \u00b6 Retrieve real-time and cumulative link monitoring statistics for all interfaces. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed link monitor statistics from the switch. list ( limit = 200 ) \u00b6 Retrieve the list of ESM port configurations using the MIB-based REST API. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed ESM port config data from the switch. portMappingConfig ( limit = 200 ) \u00b6 Retrieve port mapping table entries. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed port mapping data. portMappingSession ( limit = 200 ) \u00b6 Retrieve entries from the Port Mapping Session Table. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed port mapping session data. port_mirroring_destination ( limit = 200 ) \u00b6 Retrieve mirror destination port configuration. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of destination entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed mirror destination configuration from the switch. port_mirroring_sessions ( limit = 200 ) \u00b6 Retrieve mirror session configuration and status from the switch. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of sessions to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed mirror session data from the switch. port_mirroring_source ( limit = 200 ) \u00b6 Retrieve source port configuration for mirror sessions. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of source entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed mirror source port configuration from the switch. port_monitoring_config ( limit = 200 ) \u00b6 Retrieve monitor source port configuration from the switch. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed monitor source port data from the switch. port_monitoring_session ( limit = 200 ) \u00b6 Retrieve monitor session information. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed monitor session configuration from the switch. port_violation_status ( limit = 200 ) \u00b6 Retrieve port violation events with details like reason, action, and retry status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of records to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed port violation data from the switch. ptpPortConfig ( limit = 200 ) \u00b6 Retrieve PTP administrative status for all switch ports. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed PTP port configuration data from the switch. recovery_port_config ( limit = 200 ) \u00b6 Retrieve PVR configuration for each interface using MIB-based GET. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed PVR configuration data from the switch. set_alias ( port , alias ) \u00b6 Set or clear the alias (description) for a single port. Parameters: port ( str ) \u2013 A single port string (e.g., \u201c1/1/1\u201d). alias ( str ) \u2013 Alias string (e.g., \u201cUplink to Core\u201d) or empty \u201c\u201d to clear. Returns: ApiResult \u2013 An ApiResult with the updated interface detail. Raises: ValueError \u2013 If a port range is given (not supported by this command). set_ddm_status ( state ) \u00b6 Configures the Digital Diagnostics Monitoring (DDM) administrative status. Parameters: state ( Literal ['enable', 'disable'] ) \u2013 \u201cenable\u201d to turn on DDM monitoring; \u201cdisable\u201d to turn it off. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If an invalid state is provided. set_duplex ( target , mode ) \u00b6 Set duplex mode for a port, port range, or slot. Parameters: target ( str ) \u2013 Port (e.g., \u201c1/3/1\u201d), port range (e.g., \u201c1/3/1-4\u201d), or slot (e.g., \u201c1/3\u201d). mode ( str ) \u2013 One of \u201cfull\u201d, \u201chalf\u201d, or \u201cauto\u201d. Returns: ApiResult \u2013 An ApiResult with updated interface status if applicable. Raises: ValueError \u2013 If duplex mode is invalid. set_eee ( target , state ) \u00b6 Enables or disables Energy Efficient Ethernet (EEE) on the specified port(s) or slot. Parameters: target ( str ) \u2013 The interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range of ports) state ( Literal ['enable', 'disable'] ) \u2013 \u201cenable\u201d to turn on EEE, \u201cdisable\u201d to turn it off. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If state is not \u201cenable\u201d or \u201cdisable\u201d. set_flood_limit ( target , traffic_type , rate_mode , rate_value , low_threshold = None ) \u00b6 Configure flood limit settings for broadcast, multicast, unknown unicast, or all traffic types. Parameters: target ( str ) \u2013 Slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). traffic_type ( str ) \u2013 One of: \u201cbcast\u201d, \u201cmcast\u201d, \u201cuucast\u201d, \u201call\u201d. rate_mode ( str ) \u2013 One of: \u201cpps\u201d, \u201cmbps\u201d, \u201ccap%\u201d, \u201cenable\u201d, \u201cdisable\u201d, \u201cdefault\u201d. rate_value ( Union [ int , Literal ['enable', 'disable', 'default']] ) \u2013 The value for the selected rate_mode, or \u201cenable\u201d/\u201ddisable\u201d/\u201ddefault\u201d. low_threshold ( Optional [ int ] , default: None ) \u2013 Optional low threshold value (must be lower than rate_value, when applicable). Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If input validation fails. set_flood_limit_action ( target , traffic_type , action ) \u00b6 Configure the action taken when flood rate limits are violated for a given traffic type. Parameters: target ( str ) \u2013 Slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). traffic_type ( Literal ['bcast', 'mcast', 'uucast', 'all'] ) \u2013 One of: \u201cbcast\u201d, \u201cmcast\u201d, \u201cuucast\u201d, \u201call\u201d. action ( Literal ['shutdown', 'trap', 'default'] ) \u2013 One of: \u201cshutdown\u201d, \u201ctrap\u201d, \u201cdefault\u201d. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If any argument is invalid. set_hybrid_mode ( target , mode ) \u00b6 Configures the mode of a combo port to either fiber or copper. Parameters: target ( str ) \u2013 The interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range of ports) mode ( Literal ['fiber', 'copper'] ) \u2013 \u201cfiber\u201d or \u201ccopper\u201d Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If mode is not \u201cfiber\u201d or \u201ccopper\u201d. set_ingress_bandwidth ( target , action ) \u00b6 Configures ingress bandwidth settings on the specified slot or port(s). Parameters: target ( str ) \u2013 Target slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). action ( Union [ Literal ['enable', 'disable'], int ] ) \u2013 \u201cenable\u201d, \u201cdisable\u201d, or an integer Mbps value. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If invalid action value. set_interface ( port , parameter , value ) \u00b6 Set an interface parameter and return updated status for all affected ports. Parameters: port ( str ) \u2013 Port or range string, e.g., \u201c1/1/1\u201d or \u201c1/1/1-3\u201d. parameter ( str ) \u2013 One of \u201cadmin-state\u201d, \u201cautoneg\u201d, or \u201cepp\u201d. value ( str ) \u2013 \u201cenable\u201d or \u201cdisable\u201d. Returns: ApiResult \u2013 An ApiResult with a list of updated interface statuses. set_link_trap ( target , state ) \u00b6 Enables or disables link trap messages on the specified interface(s). Parameters: target ( str ) \u2013 Target slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/2/1\u201d, \u201c1/1/1-6\u201d). state ( Literal ['enable', 'disable'] ) \u2013 \u201cenable\u201d to generate trap messages when port changes state, \u201cdisable\u201d otherwise. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If an invalid state is provided. set_loopback ( port , enable = True ) \u00b6 Enables or disables loopback mode for the specified front-panel port. Parameters: port ( str ) \u2013 The front-panel port(s) in the format: - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range of ports) enable ( bool , default: True ) \u2013 True to enable loopback, False to disable using the \u2018no\u2019 form. Returns: ApiResult \u2013 ApiResult from the CLI API. set_max_frame_size ( target , size ) \u00b6 Configure the maximum frame size on a port or slot. Parameters: target ( str ) \u2013 Target slot (e.g. \u201c1/3\u201d) or port/port-range (e.g. \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). size ( int ) \u2013 Frame size in bytes (valid range: 1518 to 9216). Returns: ApiResult \u2013 ApiResult of the CLI command. Raises: ValueError \u2013 If the target or size is invalid. set_portgroup_speed ( port_group_number , slot , group_range , speed ) \u00b6 Configures the speed of the ports within a port group. Parameters: port_group_number ( int ) \u2013 The port group number (e.g., 1, 2, 3\u2026). slot ( str ) \u2013 The chassis/slot identifier (e.g., \u201c1/1\u201d). group_range ( str ) \u2013 The group or group range (e.g., \u201c1\u201d, \u201c2-4\u201d). speed ( Literal ['auto', '25G', '10G'] ) \u2013 The desired speed for the port group (\u201cauto\u201d, \u201c25G\u201d, or \u201c10G\u201d). Returns: ApiResult \u2013 ApiResult from the CLI API. set_speed ( target , speed ) \u00b6 Set the speed for one or more interfaces. Parameters: target ( str ) \u2013 Port or range string, e.g., \u201c1/1/1\u201d or \u201c1/1/1-3\u201d. speed ( str ) \u2013 Allowed values include \u201c10\u201d, \u201c100\u201d, \u2026, \u201c100000\u201d, \u201cauto\u201d, or \u201cmax 100\u201d/\u201dmax 1000\u201d/etc. Returns: ApiResult \u2013 An ApiResult with updated interface status per affected port. Raises: ValueError \u2013 If the speed value is invalid. set_violation_recovery_maximum ( scope , value , target = None ) \u00b6 Configures the maximum number of recovery attempts for MAC address violation recovery. Parameters: scope ( Literal ['global', 'slot', 'port'] ) \u2013 \u201cglobal\u201d applies to all ports, \u201cslot\u201d applies to a chassis/slot, \u201cport\u201d applies to a port or range. value ( Union [ int , Literal ['infinite', 'default']] ) \u2013 Integer (0\u201350), \u201cinfinite\u201d, or \u201cdefault\u201d. target ( Optional [ str ] , default: None ) \u2013 Optional. Required for \u201cslot\u201d or \u201cport\u201d. E.g., \u20181/1\u2019 (slot), \u20181/1/1\u2019, or \u20181/1/1-3\u2019 (ports). Returns: ApiResult \u2013 ApiResult from the CLI API. set_wait_to_restore ( target , value ) \u00b6 Configures the wait-to-restore timer for the specified slot or port(s). This timer delays the notification of a link-up event. Parameters: target ( str ) \u2013 The target interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range) value ( int ) \u2013 Wait-to-restore timer in seconds (0 disables the timer). Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If value is negative or target is improperly formatted. set_wait_to_shutdown ( target , value ) \u00b6 Configures the wait-to-shutdown timer for the specified slot or port(s). This timer delays the notification of a link-down event. Parameters: target ( str ) \u2013 The target interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range) value ( int ) \u2013 Wait-to-shutdown timer in seconds (0 disables the timer). Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If value is negative or target is improperly formatted. show_interface_accounting ( port ) \u00b6 Retrieve detailed status or accounting of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. accounting \u2013 If True, retrieve accounting info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails. show_interface_capability ( port ) \u00b6 Retrieve detailed status or capability of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. capability \u2013 If True, retrieve capability info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails. show_interface_counters ( port ) \u00b6 Retrieve detailed status or counter of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. accounting \u2013 If True, retrieve counter info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails. show_interface_counters_errors ( port ) \u00b6 Retrieve detailed error counters of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. counter ( errors ) \u2013 If True, retrieve error counter info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails. statistic_collisions ( limit = 200 ) \u00b6 Retrieve Ethernet collision stats using the MIB-based REST API. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed Ethernet collision statistics. statistic_counter ( limit = 200 ) \u00b6 Retrieve real-time interface traffic rates and pause frame stats. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed interface rate and pause frame stats from the switch. statistic_errors_counter ( limit = 200 ) \u00b6 Retrieve Ethernet error statistics such as alignment errors, FCS errors, and oversized/undersized frames. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed Ethernet error statistics from the switch. statistic_packets ( limit = 200 ) \u00b6 Retrieve interface statistics (standard + FC-specific) from ifTable. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed interface stats from the switch. statistic_packets_counter ( limit = 200 ) \u00b6 Retrieve high-capacity traffic and pause frame counters from alcetherStatsTable. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed traffic and pause frame statistics. statistic_traffic ( if_type = 6 , limit = 200 ) \u00b6 Retrieve high-capacity interface traffic statistics from ifXTable. Parameters: if_type ( int , default: 6 ) \u2013 Interface type to filter (default 6 for Ethernet). limit ( int , default: 200 ) \u2013 Max number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed traffic stats from the switch. status ( limit = 200 ) \u00b6 Retrieve detailed ESM port operational status using the MIB-based REST API. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed data from the switch response. status_extended ( limit = 200 ) \u00b6 Retrieve ESM port performance and ingress settings using MIB GET. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed data containing max frame size, speed, ingress rate limits, etc. tdrStats ( limit = 200 ) \u00b6 Retrieve cable diagnostics for all Ethernet switch ports. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed TDR port diagnostics data from the switch.","title":"Interface"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint","text":"Bases: BaseEndpoint Provides interface-related configuration and status management endpoints for Alcatel-Lucent OmniSwitch using MIB-based REST API.","title":"InterfaceEndpoint"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.admin_disable","text":"Disable administrative state of the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status.","title":"admin_disable"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.admin_enable","text":"Enable administrative state of the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status.","title":"admin_enable"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.autoneg_disable","text":"Disable auto-negotiation on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status.","title":"autoneg_disable"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.autoneg_enable","text":"Enable auto-negotiation on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status.","title":"autoneg_enable"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.clear_statistics","text":"Clear interface statistics counters (Layer 2 or TDR). Parameters: target ( str ) \u2013 Slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d or \u201c1/3/1-4\u201d). stat_type ( str ) \u2013 \u201cl2-statistics\u201d or \u201ctdr-statistics\u201d. cli_only ( bool , default: False ) \u2013 Whether to include \u201ccli\u201d for l2-statistics. Returns: ApiResult \u2013 ApiResult of the CLI command. Raises: ValueError \u2013 If input is invalid.","title":"clear_statistics"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.clear_violation","text":"Clears all the MAC address violation logs for a specified port or link aggregate. Parameters: target ( str ) \u2013 Port in the format \u2018chassis/slot/port[-port2]\u2019 or linkagg ID/range like \u20181-2\u2019. is_linkagg ( bool , default: False ) \u2013 If True, clears violation for a linkagg; otherwise, clears for port(s). Returns: ApiResult \u2013 ApiResult from the CLI API.","title":"clear_violation"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.epp_disable","text":"Disable EPP on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status.","title":"epp_disable"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.epp_enable","text":"Enable EPP on the interface. Parameters: port ( str ) \u2013 Port or range string. Returns: ApiResult \u2013 ApiResult with updated interface status.","title":"epp_enable"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.flood_control","text":"Retrieve broadcast, unicast, and multicast storm control settings. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed storm control data from the switch.","title":"flood_control"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.get_interface","text":"Retrieve detailed status of a specific port. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d. Returns: Optional [ dict ] \u2013 A dictionary of parsed interface details or None if the request fails.","title":"get_interface"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.globalPTPConfig","text":"Retrieve the global PTP (Precision Time Protocol) configuration. Returns: ApiResult ( ApiResult ) \u2013 Parsed PTP configuration data from the switch.","title":"globalPTPConfig"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.globalPVR","text":"Retrieve global PVR configuration values. Returns: ApiResult ( ApiResult ) \u2013 Parsed global PVR configuration from the switch.","title":"globalPVR"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.link_monitoring_config","text":"Retrieve link monitoring settings per interface. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed link monitor configuration from the switch.","title":"link_monitoring_config"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.link_monitoring_statistic","text":"Retrieve real-time and cumulative link monitoring statistics for all interfaces. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed link monitor statistics from the switch.","title":"link_monitoring_statistic"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.list","text":"Retrieve the list of ESM port configurations using the MIB-based REST API. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed ESM port config data from the switch.","title":"list"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.portMappingConfig","text":"Retrieve port mapping table entries. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed port mapping data.","title":"portMappingConfig"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.portMappingSession","text":"Retrieve entries from the Port Mapping Session Table. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed port mapping session data.","title":"portMappingSession"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.port_mirroring_destination","text":"Retrieve mirror destination port configuration. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of destination entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed mirror destination configuration from the switch.","title":"port_mirroring_destination"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.port_mirroring_sessions","text":"Retrieve mirror session configuration and status from the switch. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of sessions to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed mirror session data from the switch.","title":"port_mirroring_sessions"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.port_mirroring_source","text":"Retrieve source port configuration for mirror sessions. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of source entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed mirror source port configuration from the switch.","title":"port_mirroring_source"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.port_monitoring_config","text":"Retrieve monitor source port configuration from the switch. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed monitor source port data from the switch.","title":"port_monitoring_config"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.port_monitoring_session","text":"Retrieve monitor session information. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed monitor session configuration from the switch.","title":"port_monitoring_session"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.port_violation_status","text":"Retrieve port violation events with details like reason, action, and retry status. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of records to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed port violation data from the switch.","title":"port_violation_status"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.ptpPortConfig","text":"Retrieve PTP administrative status for all switch ports. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed PTP port configuration data from the switch.","title":"ptpPortConfig"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.recovery_port_config","text":"Retrieve PVR configuration for each interface using MIB-based GET. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed PVR configuration data from the switch.","title":"recovery_port_config"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_alias","text":"Set or clear the alias (description) for a single port. Parameters: port ( str ) \u2013 A single port string (e.g., \u201c1/1/1\u201d). alias ( str ) \u2013 Alias string (e.g., \u201cUplink to Core\u201d) or empty \u201c\u201d to clear. Returns: ApiResult \u2013 An ApiResult with the updated interface detail. Raises: ValueError \u2013 If a port range is given (not supported by this command).","title":"set_alias"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_ddm_status","text":"Configures the Digital Diagnostics Monitoring (DDM) administrative status. Parameters: state ( Literal ['enable', 'disable'] ) \u2013 \u201cenable\u201d to turn on DDM monitoring; \u201cdisable\u201d to turn it off. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If an invalid state is provided.","title":"set_ddm_status"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_duplex","text":"Set duplex mode for a port, port range, or slot. Parameters: target ( str ) \u2013 Port (e.g., \u201c1/3/1\u201d), port range (e.g., \u201c1/3/1-4\u201d), or slot (e.g., \u201c1/3\u201d). mode ( str ) \u2013 One of \u201cfull\u201d, \u201chalf\u201d, or \u201cauto\u201d. Returns: ApiResult \u2013 An ApiResult with updated interface status if applicable. Raises: ValueError \u2013 If duplex mode is invalid.","title":"set_duplex"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_eee","text":"Enables or disables Energy Efficient Ethernet (EEE) on the specified port(s) or slot. Parameters: target ( str ) \u2013 The interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range of ports) state ( Literal ['enable', 'disable'] ) \u2013 \u201cenable\u201d to turn on EEE, \u201cdisable\u201d to turn it off. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If state is not \u201cenable\u201d or \u201cdisable\u201d.","title":"set_eee"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_flood_limit","text":"Configure flood limit settings for broadcast, multicast, unknown unicast, or all traffic types. Parameters: target ( str ) \u2013 Slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). traffic_type ( str ) \u2013 One of: \u201cbcast\u201d, \u201cmcast\u201d, \u201cuucast\u201d, \u201call\u201d. rate_mode ( str ) \u2013 One of: \u201cpps\u201d, \u201cmbps\u201d, \u201ccap%\u201d, \u201cenable\u201d, \u201cdisable\u201d, \u201cdefault\u201d. rate_value ( Union [ int , Literal ['enable', 'disable', 'default']] ) \u2013 The value for the selected rate_mode, or \u201cenable\u201d/\u201ddisable\u201d/\u201ddefault\u201d. low_threshold ( Optional [ int ] , default: None ) \u2013 Optional low threshold value (must be lower than rate_value, when applicable). Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If input validation fails.","title":"set_flood_limit"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_flood_limit_action","text":"Configure the action taken when flood rate limits are violated for a given traffic type. Parameters: target ( str ) \u2013 Slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). traffic_type ( Literal ['bcast', 'mcast', 'uucast', 'all'] ) \u2013 One of: \u201cbcast\u201d, \u201cmcast\u201d, \u201cuucast\u201d, \u201call\u201d. action ( Literal ['shutdown', 'trap', 'default'] ) \u2013 One of: \u201cshutdown\u201d, \u201ctrap\u201d, \u201cdefault\u201d. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If any argument is invalid.","title":"set_flood_limit_action"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_hybrid_mode","text":"Configures the mode of a combo port to either fiber or copper. Parameters: target ( str ) \u2013 The interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range of ports) mode ( Literal ['fiber', 'copper'] ) \u2013 \u201cfiber\u201d or \u201ccopper\u201d Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If mode is not \u201cfiber\u201d or \u201ccopper\u201d.","title":"set_hybrid_mode"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_ingress_bandwidth","text":"Configures ingress bandwidth settings on the specified slot or port(s). Parameters: target ( str ) \u2013 Target slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). action ( Union [ Literal ['enable', 'disable'], int ] ) \u2013 \u201cenable\u201d, \u201cdisable\u201d, or an integer Mbps value. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If invalid action value.","title":"set_ingress_bandwidth"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_interface","text":"Set an interface parameter and return updated status for all affected ports. Parameters: port ( str ) \u2013 Port or range string, e.g., \u201c1/1/1\u201d or \u201c1/1/1-3\u201d. parameter ( str ) \u2013 One of \u201cadmin-state\u201d, \u201cautoneg\u201d, or \u201cepp\u201d. value ( str ) \u2013 \u201cenable\u201d or \u201cdisable\u201d. Returns: ApiResult \u2013 An ApiResult with a list of updated interface statuses.","title":"set_interface"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_link_trap","text":"Enables or disables link trap messages on the specified interface(s). Parameters: target ( str ) \u2013 Target slot (e.g., \u201c1/3\u201d) or port/port-range (e.g., \u201c1/2/1\u201d, \u201c1/1/1-6\u201d). state ( Literal ['enable', 'disable'] ) \u2013 \u201cenable\u201d to generate trap messages when port changes state, \u201cdisable\u201d otherwise. Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If an invalid state is provided.","title":"set_link_trap"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_loopback","text":"Enables or disables loopback mode for the specified front-panel port. Parameters: port ( str ) \u2013 The front-panel port(s) in the format: - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range of ports) enable ( bool , default: True ) \u2013 True to enable loopback, False to disable using the \u2018no\u2019 form. Returns: ApiResult \u2013 ApiResult from the CLI API.","title":"set_loopback"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_max_frame_size","text":"Configure the maximum frame size on a port or slot. Parameters: target ( str ) \u2013 Target slot (e.g. \u201c1/3\u201d) or port/port-range (e.g. \u201c1/3/1\u201d, \u201c1/3/1-4\u201d). size ( int ) \u2013 Frame size in bytes (valid range: 1518 to 9216). Returns: ApiResult \u2013 ApiResult of the CLI command. Raises: ValueError \u2013 If the target or size is invalid.","title":"set_max_frame_size"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_portgroup_speed","text":"Configures the speed of the ports within a port group. Parameters: port_group_number ( int ) \u2013 The port group number (e.g., 1, 2, 3\u2026). slot ( str ) \u2013 The chassis/slot identifier (e.g., \u201c1/1\u201d). group_range ( str ) \u2013 The group or group range (e.g., \u201c1\u201d, \u201c2-4\u201d). speed ( Literal ['auto', '25G', '10G'] ) \u2013 The desired speed for the port group (\u201cauto\u201d, \u201c25G\u201d, or \u201c10G\u201d). Returns: ApiResult \u2013 ApiResult from the CLI API.","title":"set_portgroup_speed"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_speed","text":"Set the speed for one or more interfaces. Parameters: target ( str ) \u2013 Port or range string, e.g., \u201c1/1/1\u201d or \u201c1/1/1-3\u201d. speed ( str ) \u2013 Allowed values include \u201c10\u201d, \u201c100\u201d, \u2026, \u201c100000\u201d, \u201cauto\u201d, or \u201cmax 100\u201d/\u201dmax 1000\u201d/etc. Returns: ApiResult \u2013 An ApiResult with updated interface status per affected port. Raises: ValueError \u2013 If the speed value is invalid.","title":"set_speed"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_violation_recovery_maximum","text":"Configures the maximum number of recovery attempts for MAC address violation recovery. Parameters: scope ( Literal ['global', 'slot', 'port'] ) \u2013 \u201cglobal\u201d applies to all ports, \u201cslot\u201d applies to a chassis/slot, \u201cport\u201d applies to a port or range. value ( Union [ int , Literal ['infinite', 'default']] ) \u2013 Integer (0\u201350), \u201cinfinite\u201d, or \u201cdefault\u201d. target ( Optional [ str ] , default: None ) \u2013 Optional. Required for \u201cslot\u201d or \u201cport\u201d. E.g., \u20181/1\u2019 (slot), \u20181/1/1\u2019, or \u20181/1/1-3\u2019 (ports). Returns: ApiResult \u2013 ApiResult from the CLI API.","title":"set_violation_recovery_maximum"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_wait_to_restore","text":"Configures the wait-to-restore timer for the specified slot or port(s). This timer delays the notification of a link-up event. Parameters: target ( str ) \u2013 The target interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range) value ( int ) \u2013 Wait-to-restore timer in seconds (0 disables the timer). Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If value is negative or target is improperly formatted.","title":"set_wait_to_restore"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.set_wait_to_shutdown","text":"Configures the wait-to-shutdown timer for the specified slot or port(s). This timer delays the notification of a link-down event. Parameters: target ( str ) \u2013 The target interface scope. Accepts: - \u201cslot x/y\u201d - \u201cport x/y/z\u201d - \u201cport x/y/z-a\u201d (range) value ( int ) \u2013 Wait-to-shutdown timer in seconds (0 disables the timer). Returns: ApiResult \u2013 ApiResult from the CLI API. Raises: ValueError \u2013 If value is negative or target is improperly formatted.","title":"set_wait_to_shutdown"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.show_interface_accounting","text":"Retrieve detailed status or accounting of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. accounting \u2013 If True, retrieve accounting info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails.","title":"show_interface_accounting"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.show_interface_capability","text":"Retrieve detailed status or capability of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. capability \u2013 If True, retrieve capability info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails.","title":"show_interface_capability"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.show_interface_counters","text":"Retrieve detailed status or counter of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. accounting \u2013 If True, retrieve counter info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails.","title":"show_interface_counters"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.show_interface_counters_errors","text":"Retrieve detailed error counters of a specific port or port range. Parameters: port ( str ) \u2013 Port identifier string, e.g., \u201c1/1/1\u201d, \u201c1/1/1-1/1/4\u201d, or \u201c1/1\u201d. counter ( errors ) \u2013 If True, retrieve error counter info instead of detailed status. Returns: ApiResult \u2013 A dictionary (or list of dicts) of parsed interface data, or None if request fails.","title":"show_interface_counters_errors"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.statistic_collisions","text":"Retrieve Ethernet collision stats using the MIB-based REST API. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed Ethernet collision statistics.","title":"statistic_collisions"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.statistic_counter","text":"Retrieve real-time interface traffic rates and pause frame stats. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed interface rate and pause frame stats from the switch.","title":"statistic_counter"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.statistic_errors_counter","text":"Retrieve Ethernet error statistics such as alignment errors, FCS errors, and oversized/undersized frames. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed Ethernet error statistics from the switch.","title":"statistic_errors_counter"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.statistic_packets","text":"Retrieve interface statistics (standard + FC-specific) from ifTable. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed interface stats from the switch.","title":"statistic_packets"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.statistic_packets_counter","text":"Retrieve high-capacity traffic and pause frame counters from alcetherStatsTable. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed traffic and pause frame statistics.","title":"statistic_packets_counter"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.statistic_traffic","text":"Retrieve high-capacity interface traffic statistics from ifXTable. Parameters: if_type ( int , default: 6 ) \u2013 Interface type to filter (default 6 for Ethernet). limit ( int , default: 200 ) \u2013 Max number of entries to retrieve. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed traffic stats from the switch.","title":"statistic_traffic"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.status","text":"Retrieve detailed ESM port operational status using the MIB-based REST API. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed data from the switch response.","title":"status"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.status_extended","text":"Retrieve ESM port performance and ingress settings using MIB GET. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed data containing max frame size, speed, ingress rate limits, etc.","title":"status_extended"},{"location":"endpoints/interface/#aos8_api.endpoints.interface.InterfaceEndpoint.tdrStats","text":"Retrieve cable diagnostics for all Ethernet switch ports. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to return. Defaults to 200. Returns: ApiResult ( ApiResult ) \u2013 Parsed TDR port diagnostics data from the switch.","title":"tdrStats"},{"location":"endpoints/ip/","text":"IPInterfaceEndpoint \u00b6 Bases: BaseEndpoint Endpoint to manage IP interfaces on an Alcatel-Lucent OmniSwitch using CLI-based API calls. create_IP_Interface ( name , address = None , mask = None , device = 'Vlan' , vlan_id = None , encap = 'e2' ) \u00b6 Create a new IP interface with specified parameters. Parameters: ifindex ( str ) \u2013 ifindex of the interface. address ( Optional [ str ] , default: None ) \u2013 IP address. mask ( Optional [ str ] , default: None ) \u2013 Subnet mask. vlan ( Optional [ int ] ) \u2013 VLAN ID. service ( Optional [ int ] ) \u2013 Associated service ID. encapsulation ( Optional [ str ] ) \u2013 Encapsulation type (\u2018e2\u2019 or \u2018snap\u2019). Returns: ApiResult ( ApiResult ) \u2013 Result of the creation operation or error response. create_name_interface ( name ) \u00b6 Create a new IP interface with the given name. Parameters: name ( str ) \u2013 The logical name of the interface (e.g., \u2018int-999\u2019). Returns: ApiResult ( ApiResult ) \u2013 The API response. delete ( name ) \u00b6 Delete an existing IP interface. Parameters: name ( str ) \u2013 The logical name of the interface (e.g., \u2018int-999\u2019). Returns: ApiResult ( ApiResult ) \u2013 Result of the deletion operation or error response. edit_IP_Interface ( ifindex , address = None , mask = None , device = None , vlan_id = None , forward = None , local_proxy_arp = None , encapsulation = None , primary = None ) \u00b6 Create a new IP interface with specified parameters. Parameters: ifindex ( str ) \u2013 ifindex of the interface. address ( Optional [ str ] , default: None ) \u2013 IP address. mask ( Optional [ str ] , default: None ) \u2013 Subnet mask. vlan ( Optional [ int ] ) \u2013 VLAN ID. service ( Optional [ int ] ) \u2013 Associated service ID. encapsulation ( Optional [ str ] , default: None ) \u2013 Encapsulation type (\u2018e2\u2019 or \u2018snap\u2019). primary ( Optional [ bool ] , default: None ) \u2013 Set as primary interface. Returns: ApiResult ( ApiResult ) \u2013 Result of the creation operation or error response. list ( limit = 200 ) \u00b6 Retrieve all IP interfaces using MIB-based GET with full object mapping. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: dict ( ApiResult ) \u2013 Dictionary of IP interface entries, keyed by ifIndex.","title":"IP"},{"location":"endpoints/ip/#aos8_api.endpoints.ip.IPInterfaceEndpoint","text":"Bases: BaseEndpoint Endpoint to manage IP interfaces on an Alcatel-Lucent OmniSwitch using CLI-based API calls.","title":"IPInterfaceEndpoint"},{"location":"endpoints/ip/#aos8_api.endpoints.ip.IPInterfaceEndpoint.create_IP_Interface","text":"Create a new IP interface with specified parameters. Parameters: ifindex ( str ) \u2013 ifindex of the interface. address ( Optional [ str ] , default: None ) \u2013 IP address. mask ( Optional [ str ] , default: None ) \u2013 Subnet mask. vlan ( Optional [ int ] ) \u2013 VLAN ID. service ( Optional [ int ] ) \u2013 Associated service ID. encapsulation ( Optional [ str ] ) \u2013 Encapsulation type (\u2018e2\u2019 or \u2018snap\u2019). Returns: ApiResult ( ApiResult ) \u2013 Result of the creation operation or error response.","title":"create_IP_Interface"},{"location":"endpoints/ip/#aos8_api.endpoints.ip.IPInterfaceEndpoint.create_name_interface","text":"Create a new IP interface with the given name. Parameters: name ( str ) \u2013 The logical name of the interface (e.g., \u2018int-999\u2019). Returns: ApiResult ( ApiResult ) \u2013 The API response.","title":"create_name_interface"},{"location":"endpoints/ip/#aos8_api.endpoints.ip.IPInterfaceEndpoint.delete","text":"Delete an existing IP interface. Parameters: name ( str ) \u2013 The logical name of the interface (e.g., \u2018int-999\u2019). Returns: ApiResult ( ApiResult ) \u2013 Result of the deletion operation or error response.","title":"delete"},{"location":"endpoints/ip/#aos8_api.endpoints.ip.IPInterfaceEndpoint.edit_IP_Interface","text":"Create a new IP interface with specified parameters. Parameters: ifindex ( str ) \u2013 ifindex of the interface. address ( Optional [ str ] , default: None ) \u2013 IP address. mask ( Optional [ str ] , default: None ) \u2013 Subnet mask. vlan ( Optional [ int ] ) \u2013 VLAN ID. service ( Optional [ int ] ) \u2013 Associated service ID. encapsulation ( Optional [ str ] , default: None ) \u2013 Encapsulation type (\u2018e2\u2019 or \u2018snap\u2019). primary ( Optional [ bool ] , default: None ) \u2013 Set as primary interface. Returns: ApiResult ( ApiResult ) \u2013 Result of the creation operation or error response.","title":"edit_IP_Interface"},{"location":"endpoints/ip/#aos8_api.endpoints.ip.IPInterfaceEndpoint.list","text":"Retrieve all IP interfaces using MIB-based GET with full object mapping. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of entries to retrieve. Defaults to 200. Returns: dict ( ApiResult ) \u2013 Dictionary of IP interface entries, keyed by ifIndex.","title":"list"},{"location":"endpoints/lacp/","text":"LACPEndpoint \u00b6 Bases: BaseEndpoint Endpoint to manage system-level configuration on an Alcatel-Lucent OmniSwitch using CLI-based API commands. getLACP ( lacp_type = 0 , limit = 200 ) \u00b6 Retrieve link aggregation configurations filtered by LACP type. Parameters: lacp_type ( int , default: 0 ) \u2013 0 = Static, 1 = LACP. Default is 0 (static). limit ( int , default: 200 ) \u2013 Max number of rows to retrieve. Default is 200. Returns: ApiResult ( ApiResult ) \u2013 Contains LAG configurations. lacpStats ( limit = 200 ) \u00b6 Retrieve per-port statistics for link aggregation. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Contains statistics for LAG member ports.","title":"LACP"},{"location":"endpoints/lacp/#aos8_api.endpoints.lacp.LACPEndpoint","text":"Bases: BaseEndpoint Endpoint to manage system-level configuration on an Alcatel-Lucent OmniSwitch using CLI-based API commands.","title":"LACPEndpoint"},{"location":"endpoints/lacp/#aos8_api.endpoints.lacp.LACPEndpoint.getLACP","text":"Retrieve link aggregation configurations filtered by LACP type. Parameters: lacp_type ( int , default: 0 ) \u2013 0 = Static, 1 = LACP. Default is 0 (static). limit ( int , default: 200 ) \u2013 Max number of rows to retrieve. Default is 200. Returns: ApiResult ( ApiResult ) \u2013 Contains LAG configurations.","title":"getLACP"},{"location":"endpoints/lacp/#aos8_api.endpoints.lacp.LACPEndpoint.lacpStats","text":"Retrieve per-port statistics for link aggregation. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Contains statistics for LAG member ports.","title":"lacpStats"},{"location":"endpoints/mac/","text":"MacLearningEndpoint \u00b6 Bases: BaseEndpoint Endpoint for managing MVRP configuration. globalMacLearning () \u00b6 Retrieves the system MAC address aging value. Returns: ApiResult ( ApiResult ) \u2013 Contains the slMacAgingValue if successful. macPortConfiguration ( limit = 200 ) \u00b6 Retrieve MAC learning control status per interface. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response containing interface MAC learning control statuses. showMacAddress ( limit = 200 ) \u00b6 Retrieve global MAC address records. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Contains parsed global MAC address entries.","title":"MAC"},{"location":"endpoints/mac/#aos8_api.endpoints.mac.MacLearningEndpoint","text":"Bases: BaseEndpoint Endpoint for managing MVRP configuration.","title":"MacLearningEndpoint"},{"location":"endpoints/mac/#aos8_api.endpoints.mac.MacLearningEndpoint.globalMacLearning","text":"Retrieves the system MAC address aging value. Returns: ApiResult ( ApiResult ) \u2013 Contains the slMacAgingValue if successful.","title":"globalMacLearning"},{"location":"endpoints/mac/#aos8_api.endpoints.mac.MacLearningEndpoint.macPortConfiguration","text":"Retrieve MAC learning control status per interface. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Parsed response containing interface MAC learning control statuses.","title":"macPortConfiguration"},{"location":"endpoints/mac/#aos8_api.endpoints.mac.MacLearningEndpoint.showMacAddress","text":"Retrieve global MAC address records. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult ( ApiResult ) \u2013 Contains parsed global MAC address entries.","title":"showMacAddress"},{"location":"endpoints/mvrp/","text":"MvrpEndpoint \u00b6 Bases: BaseEndpoint Endpoint for managing MVRP configuration. globalMVRP () \u00b6 Retrieve global MVRP configuration settings. Returns: ApiResult ( ApiResult ) \u2013 MVRP global status and VLAN limit configuration. mvrpPortConfig ( limit = 200 ) \u00b6 Retrieve MVRP port configuration table. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to return (default is 200). Returns: ApiResult ( ApiResult ) \u2013 The MVRP port configuration per interface. mvrp_Vlan_Restriction ( limit = 200 ) \u00b6 Retrieve MVRP VLAN restriction configuration entries where restrictions are set. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to retrieve (default 200). Returns: ApiResult ( ApiResult ) \u2013 Parsed data with restricted VLANs. mvrp_stats ( port_status = 1 , limit = 200 ) \u00b6 Retrieve MVRP port statistics with an optional port status filter. Parameters: port_status ( int , default: 1 ) \u2013 Filter for alaMvrpPortStatus (default is 1). limit ( int , default: 200 ) \u2013 Max number of rows to retrieve (default is 200). Returns: ApiResult ( ApiResult ) \u2013 Parsed MVRP port statistics.","title":"MVRP"},{"location":"endpoints/mvrp/#aos8_api.endpoints.mvrp.MvrpEndpoint","text":"Bases: BaseEndpoint Endpoint for managing MVRP configuration.","title":"MvrpEndpoint"},{"location":"endpoints/mvrp/#aos8_api.endpoints.mvrp.MvrpEndpoint.globalMVRP","text":"Retrieve global MVRP configuration settings. Returns: ApiResult ( ApiResult ) \u2013 MVRP global status and VLAN limit configuration.","title":"globalMVRP"},{"location":"endpoints/mvrp/#aos8_api.endpoints.mvrp.MvrpEndpoint.mvrpPortConfig","text":"Retrieve MVRP port configuration table. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to return (default is 200). Returns: ApiResult ( ApiResult ) \u2013 The MVRP port configuration per interface.","title":"mvrpPortConfig"},{"location":"endpoints/mvrp/#aos8_api.endpoints.mvrp.MvrpEndpoint.mvrp_Vlan_Restriction","text":"Retrieve MVRP VLAN restriction configuration entries where restrictions are set. Parameters: limit ( int , default: 200 ) \u2013 Maximum number of rows to retrieve (default 200). Returns: ApiResult ( ApiResult ) \u2013 Parsed data with restricted VLANs.","title":"mvrp_Vlan_Restriction"},{"location":"endpoints/mvrp/#aos8_api.endpoints.mvrp.MvrpEndpoint.mvrp_stats","text":"Retrieve MVRP port statistics with an optional port status filter. Parameters: port_status ( int , default: 1 ) \u2013 Filter for alaMvrpPortStatus (default is 1). limit ( int , default: 200 ) \u2013 Max number of rows to retrieve (default is 200). Returns: ApiResult ( ApiResult ) \u2013 Parsed MVRP port statistics.","title":"mvrp_stats"},{"location":"endpoints/system/","text":"SystemEndpoint \u00b6 Bases: BaseEndpoint Endpoint to manage system-level configuration on an Alcatel-Lucent OmniSwitch using CLI-based API commands. getSystemInformation () \u00b6 Retrieve system and system service configuration data. Returns: ApiResult ( ApiResult ) \u2013 Parsed response from the switch. keepAlive () \u00b6 Retrieve current trap count from the switch. Returns: ApiResult ( ApiResult ) \u2013 Parsed trap count data. setDateTime ( date = None , time = None , timezone = None ) \u00b6 Update the system date, time, and timezone information. Parameters: date ( str , default: None ) \u2013 System date. time ( str , default: None ) \u2013 System time. timezone ( str , default: None ) \u2013 System timezone description. Returns: ApiResult ( ApiResult ) \u2013 Response from the API. setSystem ( contact = None , name = None , location = None ) \u00b6 Update the system contact, name, and location information. Parameters: contact ( str , default: None ) \u2013 System contact email or name. name ( str , default: None ) \u2013 System name (hostname). location ( str , default: None ) \u2013 System location description. Returns: ApiResult ( ApiResult ) \u2013 Response from the API.","title":"System"},{"location":"endpoints/system/#aos8_api.endpoints.system.SystemEndpoint","text":"Bases: BaseEndpoint Endpoint to manage system-level configuration on an Alcatel-Lucent OmniSwitch using CLI-based API commands.","title":"SystemEndpoint"},{"location":"endpoints/system/#aos8_api.endpoints.system.SystemEndpoint.getSystemInformation","text":"Retrieve system and system service configuration data. Returns: ApiResult ( ApiResult ) \u2013 Parsed response from the switch.","title":"getSystemInformation"},{"location":"endpoints/system/#aos8_api.endpoints.system.SystemEndpoint.keepAlive","text":"Retrieve current trap count from the switch. Returns: ApiResult ( ApiResult ) \u2013 Parsed trap count data.","title":"keepAlive"},{"location":"endpoints/system/#aos8_api.endpoints.system.SystemEndpoint.setDateTime","text":"Update the system date, time, and timezone information. Parameters: date ( str , default: None ) \u2013 System date. time ( str , default: None ) \u2013 System time. timezone ( str , default: None ) \u2013 System timezone description. Returns: ApiResult ( ApiResult ) \u2013 Response from the API.","title":"setDateTime"},{"location":"endpoints/system/#aos8_api.endpoints.system.SystemEndpoint.setSystem","text":"Update the system contact, name, and location information. Parameters: contact ( str , default: None ) \u2013 System contact email or name. name ( str , default: None ) \u2013 System name (hostname). location ( str , default: None ) \u2013 System location description. Returns: ApiResult ( ApiResult ) \u2013 Response from the API.","title":"setSystem"},{"location":"endpoints/vlan/","text":"VlanEndpoint \u00b6 Bases: BaseEndpoint Endpoint for managing VLAN configuration via the AOS RESTFUL API. create ( vlan_id , description = None , mtu = 1500 , AdmStatus = 1 , vlanSrcLearningStatus = 1 ) \u00b6 Create VLAN info using a POST request with specific MIB object filters. Returns: ApiResult ( ApiResult ) \u2013 VLAN data from the switch. delete ( vlan_id ) \u00b6 Delete VLAN using a POST request with specific MIB object filters. Returns: ApiResult ( ApiResult ) \u2013 VLAN data from the switch. edit ( vlan_id , description = None , mtu = 1500 , AdmStatus = 1 , vlanSrcLearningStatus = 1 ) \u00b6 Edit VLAN info using a POST request with specific MIB object filters. Returns: ApiResult ( ApiResult ) \u2013 VLAN data from the switch. list ( vlan_type = 5 , limit = 200 ) \u00b6 Retrieve the list of VLANs using the MIB-based REST API. Parameters: vlan_type ( int , default: 5 ) \u2013 VLAN type filter (default 5 for Ethernet VLAN). limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult \u2013 Parsed VLAN data from the switch.","title":"VLAN"},{"location":"endpoints/vlan/#aos8_api.endpoints.vlan.VlanEndpoint","text":"Bases: BaseEndpoint Endpoint for managing VLAN configuration via the AOS RESTFUL API.","title":"VlanEndpoint"},{"location":"endpoints/vlan/#aos8_api.endpoints.vlan.VlanEndpoint.create","text":"Create VLAN info using a POST request with specific MIB object filters. Returns: ApiResult ( ApiResult ) \u2013 VLAN data from the switch.","title":"create"},{"location":"endpoints/vlan/#aos8_api.endpoints.vlan.VlanEndpoint.delete","text":"Delete VLAN using a POST request with specific MIB object filters. Returns: ApiResult ( ApiResult ) \u2013 VLAN data from the switch.","title":"delete"},{"location":"endpoints/vlan/#aos8_api.endpoints.vlan.VlanEndpoint.edit","text":"Edit VLAN info using a POST request with specific MIB object filters. Returns: ApiResult ( ApiResult ) \u2013 VLAN data from the switch.","title":"edit"},{"location":"endpoints/vlan/#aos8_api.endpoints.vlan.VlanEndpoint.list","text":"Retrieve the list of VLANs using the MIB-based REST API. Parameters: vlan_type ( int , default: 5 ) \u2013 VLAN type filter (default 5 for Ethernet VLAN). limit ( int , default: 200 ) \u2013 Maximum number of results to return. Returns: ApiResult \u2013 Parsed VLAN data from the switch.","title":"list"},{"location":"endpoints/vpa/","text":"VlanPortAssociation \u00b6 Bases: BaseEndpoint Endpoint for managing VLAN-port associations via the AOS CLI API. create ( port_id , vlan_id , mode = 'untagged' ) \u00b6 Add a port to a VLAN with the specified tagging mode via MIB POST API. Parameters: port_id ( str ) \u2013 Port identifier (e.g., \u201c1/1/22\u201d). vlan_id ( str ) \u2013 VLAN ID to associate with the port. mode ( str , default: 'untagged' ) \u2013 \u201cuntagged\u201d or \u201ctagged\u201d. Defaults to \u201cuntagged\u201d. Returns: ApiResult ( ApiResult ) \u2013 Retrieve all port associations for a given VLAN using a GET request. delete ( port_id , vlan_id ) \u00b6 Remove a port from a VLAN. Parameters: port_id ( str ) \u2013 Port identifier. vlan_id ( str ) \u2013 VLAN ID to disassociate from the port. Returns: ApiResult ( ApiResult ) \u2013 Retrieve all port associations for a given VLAN using a GET request. edit ( port_id , vlan_id , mode = 'untagged' ) \u00b6 Modify a port\u2019s tagging mode in a VLAN. Parameters: port_id ( str ) \u2013 Port identifier. vlan_id ( str ) \u2013 VLAN ID. mode ( str , default: 'untagged' ) \u2013 New tagging mode (\u201cuntagged\u201d or \u201ctagged\u201d). Defaults to \u201cuntagged\u201d. Returns: ApiResult ( ApiResult ) \u2013 Retrieve all port associations for a given VLAN using a GET request. list_by_vlan ( vlan_id ) \u00b6 Retrieve all port associations for a given VLAN using a GET request. Parameters: vlan_id ( int ) \u2013 VLAN ID to filter the VPA table. Returns: ApiResult \u2013 Parsed data from the VPA table for the specified VLAN.","title":"VPA"},{"location":"endpoints/vpa/#aos8_api.endpoints.vpa.VlanPortAssociation","text":"Bases: BaseEndpoint Endpoint for managing VLAN-port associations via the AOS CLI API.","title":"VlanPortAssociation"},{"location":"endpoints/vpa/#aos8_api.endpoints.vpa.VlanPortAssociation.create","text":"Add a port to a VLAN with the specified tagging mode via MIB POST API. Parameters: port_id ( str ) \u2013 Port identifier (e.g., \u201c1/1/22\u201d). vlan_id ( str ) \u2013 VLAN ID to associate with the port. mode ( str , default: 'untagged' ) \u2013 \u201cuntagged\u201d or \u201ctagged\u201d. Defaults to \u201cuntagged\u201d. Returns: ApiResult ( ApiResult ) \u2013 Retrieve all port associations for a given VLAN using a GET request.","title":"create"},{"location":"endpoints/vpa/#aos8_api.endpoints.vpa.VlanPortAssociation.delete","text":"Remove a port from a VLAN. Parameters: port_id ( str ) \u2013 Port identifier. vlan_id ( str ) \u2013 VLAN ID to disassociate from the port. Returns: ApiResult ( ApiResult ) \u2013 Retrieve all port associations for a given VLAN using a GET request.","title":"delete"},{"location":"endpoints/vpa/#aos8_api.endpoints.vpa.VlanPortAssociation.edit","text":"Modify a port\u2019s tagging mode in a VLAN. Parameters: port_id ( str ) \u2013 Port identifier. vlan_id ( str ) \u2013 VLAN ID. mode ( str , default: 'untagged' ) \u2013 New tagging mode (\u201cuntagged\u201d or \u201ctagged\u201d). Defaults to \u201cuntagged\u201d. Returns: ApiResult ( ApiResult ) \u2013 Retrieve all port associations for a given VLAN using a GET request.","title":"edit"},{"location":"endpoints/vpa/#aos8_api.endpoints.vpa.VlanPortAssociation.list_by_vlan","text":"Retrieve all port associations for a given VLAN using a GET request. Parameters: vlan_id ( int ) \u2013 VLAN ID to filter the VPA table. Returns: ApiResult \u2013 Parsed data from the VPA table for the specified VLAN.","title":"list_by_vlan"},{"location":"helper/parser/","text":"parse_interface_accounting ( output ) \u00b6 Parses the CLI output of \u2018show interfaces port accounting\u2019 into a dictionary. Parameters: output ( str ) \u2013 CLI output as a string. Returns: Dict [ str , int ] \u2013 Dictionary mapping each metric to its integer value. parse_interface_counters ( output ) \u00b6 Parses \u2018show interfaces port counters\u2019 CLI output into a dictionary. Parameters: output ( str ) \u2013 CLI raw string from the command. Returns: Dict [ str , int ] \u2013 Dictionary of counters with their values. parse_interface_counters_errors ( output ) \u00b6 Parses \u2018show interfaces port counters errors\u2019 CLI output into a dictionary. Parameters: output ( str ) \u2013 CLI output string. Returns: Dict [ str , float ] \u2013 Dictionary with error counter names and numeric values (float or int). parse_interface_detail ( cli_output ) \u00b6 Parses \u2018show interface detail\u2019 CLI output including Rx and Tx subsections. :param cli_output: Raw CLI output as a string :return: Dictionary with top-level and Rx/Tx values parse_interface_status ( cli_output ) \u00b6 Parses \u2018show interfaces\u2019 status CLI output. :param cli_output: Raw CLI output as a string :return: List of dictionaries per interface row parse_ip_interface_output ( cli_output ) \u00b6 Parses the \u2018show ip interface\u2019 CLI output into a list of dictionaries. :param cli_output: Raw CLI output as a string :return: List of dictionaries with parsed interface data parse_output_json ( output ) \u00b6 Parses CLI table output with headers and fixed-format rows. :param output: Raw CLI output as a string :return: List of dictionaries mapping headers to values parse_system_output_json ( cli_output ) \u00b6 Parses CLI output with section headers and key-value pairs into a nested dictionary. :param cli_output: Raw CLI output as a string :return: Dictionary representing parsed output parse_vlan_output_json ( output ) \u00b6 Parses VLAN CLI output in table format. :param output: Raw CLI output as a string :return: List of dictionaries per VLAN entry","title":"Parser"},{"location":"helper/parser/#aos8_api.helper.parse_interface_accounting","text":"Parses the CLI output of \u2018show interfaces port accounting\u2019 into a dictionary. Parameters: output ( str ) \u2013 CLI output as a string. Returns: Dict [ str , int ] \u2013 Dictionary mapping each metric to its integer value.","title":"parse_interface_accounting"},{"location":"helper/parser/#aos8_api.helper.parse_interface_counters","text":"Parses \u2018show interfaces port counters\u2019 CLI output into a dictionary. Parameters: output ( str ) \u2013 CLI raw string from the command. Returns: Dict [ str , int ] \u2013 Dictionary of counters with their values.","title":"parse_interface_counters"},{"location":"helper/parser/#aos8_api.helper.parse_interface_counters_errors","text":"Parses \u2018show interfaces port counters errors\u2019 CLI output into a dictionary. Parameters: output ( str ) \u2013 CLI output string. Returns: Dict [ str , float ] \u2013 Dictionary with error counter names and numeric values (float or int).","title":"parse_interface_counters_errors"},{"location":"helper/parser/#aos8_api.helper.parse_interface_detail","text":"Parses \u2018show interface detail\u2019 CLI output including Rx and Tx subsections. :param cli_output: Raw CLI output as a string :return: Dictionary with top-level and Rx/Tx values","title":"parse_interface_detail"},{"location":"helper/parser/#aos8_api.helper.parse_interface_status","text":"Parses \u2018show interfaces\u2019 status CLI output. :param cli_output: Raw CLI output as a string :return: List of dictionaries per interface row","title":"parse_interface_status"},{"location":"helper/parser/#aos8_api.helper.parse_ip_interface_output","text":"Parses the \u2018show ip interface\u2019 CLI output into a list of dictionaries. :param cli_output: Raw CLI output as a string :return: List of dictionaries with parsed interface data","title":"parse_ip_interface_output"},{"location":"helper/parser/#aos8_api.helper.parse_output_json","text":"Parses CLI table output with headers and fixed-format rows. :param output: Raw CLI output as a string :return: List of dictionaries mapping headers to values","title":"parse_output_json"},{"location":"helper/parser/#aos8_api.helper.parse_system_output_json","text":"Parses CLI output with section headers and key-value pairs into a nested dictionary. :param cli_output: Raw CLI output as a string :return: Dictionary representing parsed output","title":"parse_system_output_json"},{"location":"helper/parser/#aos8_api.helper.parse_vlan_output_json","text":"Parses VLAN CLI output in table format. :param output: Raw CLI output as a string :return: List of dictionaries per VLAN entry","title":"parse_vlan_output_json"}]}